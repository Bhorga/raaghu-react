
.bDropdown{
  display: block;
  padding: 0.375rem 0.75rem;
  width: 100%;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #ced4da;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 0.25rem;
  transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}

// .dropdown-toggle {
//     display: flex !important;
//     //align-items: self-end;
//   }
  
//   .dropdown-toggle::after {
//    /* border-top: 0;*/
//     display:none !important;
//   }
//   .dropdown-menu{
//     //max-height: 155px;
//     overflow-y: auto !important;
//   }
//   .form-select::before{
//     content: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e") !important;
//     transform: rotate(358deg) !important;
//     right: 10px !important;
//     top: 10px !important;
//     position: absolute !important;
//     z-index: 2 !important;
//     width: 13px !important;
//     height: 13px !important;
//   }
//   .dropdownarrow.form-select[size]:not([size="1"]){
//     background-image: none !important;
//   }
//   .dropdownarrow.form-select[size]:not([size="1"])::before  {
  
//     content: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e") !important;
//     transform: rotate(358deg) !important;
//     right: 10px !important;
//     top: 11px !important;
//     position: absolute !important;
//     z-index: 2 !important;
//     width: 13px !important;
//     height: 13px !important;
//     transition: transform .2s ease-in-out !important;
//   }
//   .droparrow.form-select[size]:not([size="1"])::before {
//     transform: rotate(180deg) !important;
//     transition: transform .2s ease-in-out !important;
//     top: 11px !important;
//     right: 10px !important;
  
//   }

  /* <div className="dropdown w-100">
<span className={`dropdown-toggle gap-2 dropdownarrow py-2 ${button1}`} data-bs-offset={offset} 
onClick={openHandler} role="button"  id={id}  data-bs-auto-close="true" data-bs-toggle="dropdown" 
aria-expanded ={props.show} >
  <RdsIcon name={props.icon} height={props.iconHeight} width={props.iconWidth} fill={props.iconFill}
    stroke={props.iconStroke} classes ="pe-1" />
{(props.hasOwnProperty('entity')==false || checkedCategoryList.length < 1)  && <span className="text-muted text-nowrap text-truncate overflow-hidden" >
{props.placeholder1}
</span>}
 { props.entity && checkedCategoryList.length > 0 && <span >
 {props.badgeList.map((title:any) => <RdsBadge size='small' onClose={(e)=>initAllSelect(e,title)} showClose={true} label={title.value} colorVariant='primary' />) }
  </span>}
</span>

{/* <ng-template #other_content>Select Property</ng-template> *
<ul className="dropdown-menu"  aria-labelledby={id} style={{}} //</div>[ngStyle]="{'max-height':dropdownHeight === '' || null || undefined ? '155px' : dropdownHeight + 'px'}"
>
  { props.selectAll && props.multiSelect&&<li className="list-group-item p-0" >
    <span className="dropdown-item">
      <input type="checkbox" name="list_name" value="h1" className="form-check-input me-2" onChange={checkUncheckAll} //[(ngModel)]="isMasterSel"  
       />
      <label className="form-check-label mx-2">Select All</label>
    </span>
  </li>}

{ listItems.map((item:any, index:number)=>( <li   onClick={(e)=>initAllSelect(e,item)} 
>
  <a className={`dropdown-item ${props.value===item.some?'active':''}`}>
    <div className="d-flex justify-content-between">
      <div>
       {props.multiSelect && <input className="form-check-input me-2" type="checkbox" onChange={isAllSelected} //[(ngModel)]="item.isSelected" 
         />}
        <label className="form-check-label ">
          <div className="d-flex justify-content-between gap-2 mb-1 align-items-center">
         { item.icon && <RdsIcon name={item.icon} height={item.iconHeight} width={item.iconWidth} fill={item.iconFill}
           stroke={item.iconStroke} classes ="pe-1" />}
            <span>{item.some}</span>
          </div>
        </label>
      </div>
      <div>
      {props.value===item.some&&<RdsIcon name='check' height='15px' width='15px' fill={false} stroke={true} colorVariant='primary'/>}
      </div>
    </div>
 </a>
</li>
) ) }
</ul>
</div> */